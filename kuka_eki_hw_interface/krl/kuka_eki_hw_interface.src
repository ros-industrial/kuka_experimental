&ACCESS RVP
&REL 5
def  kuka_eki_hw_interface()
   ; Declarations
   decl axis joint_pos_tgt
   decl int elements_read

   ; INI
   bas(#initmov, 0)  ; Basic initialization of axes

;FOLD description 
   ; Initialize eki_hw_interface server
   ;   Config located in C:/ROBOTER/Config/User/Common/EthernetKRL/EkiHwInterface.xml
   ;   Starts a TCP state sever on xml-specified IP address/port.
   ;
   ;   State transmission is periodic (currently determined by $timer[1]=-## line in
   ;   eki_hw_iface_send()
   ;
   ;   Joint position commands execute as they come in.
   ;   PTP motions are blended in joint-space via c_ptp approximation when possible
   ;   via the advance run.  The advance run will read and blend command points as
   ;   soon as the become available up to value set in $advance (in range [0, 5])
   ;
   ;   Utilized system resources:
   ;     Flags:
   ;       $flag[1]:        Indicates active client connection
   ;       $timer_flag[1]:  Used to trigger periodic send of robot state
   ;     Interrupts:
   ;       15: Calls eki_hw_iface_reset() on falling edge of $flag[1]
   ;       16: Calls eki_hw_iface_send() on rising edge of $timer_flag[1]
;ENDFOLD  
   eki_hw_iface_init()

   ; BCO (Block Coincidence) run to current position
   ; (required for below loop continue before first incoming command)
   joint_pos_tgt = $axis_act
   ptp joint_pos_tgt

   ; Loop forever
   $advance = 5
   loop
      elements_read = eki_hw_iface_get(joint_pos_tgt)  ; Get new command from buffer if present
      ptp joint_pos_tgt c_ptp                          ; PTP to most recent commanded position
   endloop

;FOLD note
   ; Note: EKI channels delete on reset or deselect of this program
   ;       See <ENVIRONMENT>Program</ENVIRONMENT> EKI config element
;ENDFOLD
end



def eki_hw_iface_init()
   decl int ekx_ret
   id_count = 0
   ; Setup interrupts
   ; Interrupt 15 - Connection cleanup on client disconnect
   global interrupt decl 15 when $flag[1]==false do eki_hw_iface_reset()
   interrupt on 15
   ; Interrupt 16 - Timer interrupt for periodic state transmission
   global interrupt decl 16 when $timer_flag[1]==true do eki_hw_iface_send()
   interrupt on 16
   wait sec 0.012          ; Wait for next interpolation cycle
   $timer[1] = -200        ; Time in [ms] before first interrupt call
   $timer_stop[1] = false  ; Start timer 1

   ; Create and open EKI interface
   ; ekx_ret = eki_init("EkiHwInterface")
   ekx_ret = EKX_Open("EkiHwInterface")
   EKX_HandleError(ekx_ret)

   $flag[1] = true
end



def eki_hw_iface_send()
   decl int ekx_ret   
   decl real vel_percent      

   if $flag[1] then  ; If connection alive
      ; Load state values into xml structure
    
      ; position
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A1", $axis_act.a1)
      EKX_HandleError(ekx_ret)
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A2", $axis_act.a2)
      EKX_HandleError(ekx_ret)
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A3", $axis_act.a3)
      EKX_HandleError(ekx_ret)
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A4", $axis_act.a4)    
      EKX_HandleError(ekx_ret)
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A5", $axis_act.a5)
      EKX_HandleError(ekx_ret)
      ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Pos.A6", $axis_act.a6)
      EKX_HandleError(ekx_ret)
    
;FOLD velocity
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A1", $vel_axis_act[1] * $vel_axis_ma[1] / 100.0)
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A2", $vel_axis_act[2] * $vel_axis_ma[2] / 100.0)
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A3", $vel_axis_act[3] * $vel_axis_ma[3] / 100.0)
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A4", $vel_axis_act[4] * $vel_axis_ma[4] / 100.0)
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A5", $vel_axis_act[5] * $vel_axis_ma[5] / 100.0)
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Vel.A6", $vel_axis_act[6] * $vel_axis_ma[6] / 100.0)
;ENDFOLD
;FOLD effort
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A1", $torque_axis_act[1])
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A2", $torque_axis_act[2])
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A3", $torque_axis_act[3])
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A4", $torque_axis_act[4])
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A5", $torque_axis_act[5])
      ;ekx_ret = EKX_WriteReal("EkiHwInterface.RobotState.Eff.A6", $torque_axis_act[6])
;ENDFOLD
      ; interface state
      ; ekx_ret = eki_checkbuffer("EkiHwInterface.RobotCommand.Pos.A1")
      ; ekx_ret = EKX_WriteInteger("EkiHwInterface.RobotState.RobotCommand.Size", ekx_ret.buff)

      ekx_ret = EKX_WriteInteger("EkiHwInterface.RobotState.RobotCommand.ID", id_count)
      EKX_HandleError(ekx_ret)

      ; Send xml structure
      if $flag[1] then  ; Make sure connection hasn't died while updating xml structure
        ekx_ret = EKX_Send("EkiHwInterface.RobotState")
        EKX_HandleError(ekx_ret)
      endif
   endif

   ; Set timer for next interrupt [ms]
   $timer[1] = -10  ; ~10 ms for above send + 10 ms interrupt timer -> ~50 Hz state transmission
end

; eki_hw_iface_get
; Tries to read most recent element from buffer. q left unchanged if empty.
; Returns number of elements read.
deffct int eki_hw_iface_get(joint_pos_cmd :out)
   decl bool ekx_ret
   decl axis joint_pos_cmd
   decl bool is_new 
   decl int rec_id

   ; ekx_ret = eki_checkbuffer("EkiHwInterface.RobotCommand.Pos.A1")
   ; if ekx_ret.buff <= 0 then
   ;   return 0
   ; endif
  
   ekx_ret = EKX_WaitForSensorData(1, "EkiHwInterface.RobotCommand.ID", 10000)
   ekx_ret = EKX_GetIntegerElement(1, "EkiHwInterface.RobotCommand.ID", rec_id, is_new)
   ; if id_count == rec_id then
   ;   return 0
   ; endif
  
   ; if not ekx_ret then
   ;    return 0
   ; endif

   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A1", joint_pos_cmd.a1, is_new)
   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A2", joint_pos_cmd.a2, is_new)
   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A3", joint_pos_cmd.a3, is_new)
   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A4", joint_pos_cmd.a4, is_new)
   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A5", joint_pos_cmd.a5, is_new)
   ekx_ret = EKX_GetRealElement(1, "EkiHwInterface.RobotCommand.Pos.A6", joint_pos_cmd.a6, is_new)

   id_count = rec_id

   return 1
endfct



def eki_hw_iface_reset()
   decl int ekx_ret_int
   decl bool ekx_ret_bool

   ekx_ret_bool = EKX_Close("EkiHwInterface")
   ekx_ret_int = EKX_Open("EkiHwInterface")
   EKX_HandleError(ekx_ret_int)
   $flag[1] = true
end
